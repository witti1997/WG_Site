{"version":3,"file":"component---src-pages-putzplan-tsx-0fc172529cb0ccee3603.js","mappings":"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","sources":["webpack://my-first-gatsby-site/./src/components/layout.module.css","webpack://my-first-gatsby-site/./src/components/layout.tsx","webpack://my-first-gatsby-site/./src/components/seo.tsx","webpack://my-first-gatsby-site/./node_modules/date-fns/constants.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/toDate.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/startOfWeek.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/constructFrom.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/getWeekYear.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/startOfWeekYear.mjs","webpack://my-first-gatsby-site/./node_modules/date-fns/getWeek.mjs","webpack://my-first-gatsby-site/./src/components/PutzplanComponent.tsx","webpack://my-first-gatsby-site/./src/components/PutzplanContainer.tsx","webpack://my-first-gatsby-site/./src/pages/putzplan.tsx","webpack://my-first-gatsby-site/./src/components/EinkaufslisteComponents.module.css"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";\nexport var siteTitle = \"layout-module--siteTitle--86bf1\";","import * as React from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\nimport {\r\n  container,\r\n  heading,\r\n  navLinks,\r\n  navLinkItem,\r\n  navLinkText,\r\n  siteTitle\r\n} from './layout.module.css';\r\n\r\n// Definition der Props für die Layout-Komponente\r\ninterface LayoutProps {\r\n  pageTitle: string;\r\n  children: React.ReactNode; // Kinder können jedes React-Element sein\r\n}\r\n\r\n// Layout-Komponente mit typisierten Props\r\nconst Layout: React.FC<LayoutProps> = ({ pageTitle, children }): JSX.Element => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  return (\r\n    <div className={container}>\r\n      <header className={siteTitle}>{data.site.siteMetadata.title}</header>\r\n      <nav>\r\n        <ul className={navLinks}>\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/\" className={navLinkText}>Home</Link>\r\n          </li>\r\n\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/about\" className={navLinkText}>About</Link>\r\n          </li>\r\n\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/blog\" className={navLinkText}>Blog</Link>\r\n          </li>\r\n\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/putzplan\" className={navLinkText}>Putzplan</Link>\r\n          </li>\r\n\r\n          <li className={navLinkItem}>\r\n            <Link to=\"/einkaufsliste\" className={navLinkText}>Deine Einkaufsliste</Link>\r\n          </li>\r\n\r\n        </ul>\r\n      </nav>\r\n      <main>\r\n        <h1 className={heading}>{pageTitle}</h1>\r\n        {children}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;","import * as React from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\n\r\nconst Seo = ({ title }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <title>{title} | {data.site.siteMetadata.title}</title>\r\n  )\r\n}\r\n\r\nexport default Seo","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import React from \"react\";\r\nimport { shoppingListItemStyle } from './EinkaufslisteComponents.module.css';\r\n\r\ninterface Rotation {\r\n    task: string;\r\n    person: string;\r\n}\r\n\r\ninterface PutzplanProps {\r\n    rotation: Rotation[];\r\n}\r\n\r\n\r\nconst PutzplanComponent: React.FC<PutzplanProps> = ({rotation}) => {\r\n  return (\r\n      <div>\r\n        <ul style={{ paddingLeft: \"0\" }}>\r\n            {rotation.map((item,index) => (\r\n            <li className={shoppingListItemStyle} key={index}> <strong>{item.person}:</strong> &emsp; {item.task}</li>\r\n        ))}\r\n        </ul>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default PutzplanComponent;","import React from \"react\";\r\nimport {getWeek} from \"date-fns\";\r\nimport PutzplanComponent from \"./PutzplanComponent\";\r\n\r\ninterface Rotation {\r\n    task: string;\r\n    person: string;\r\n}\r\n\r\nconst PutzplanContainer: React.FC = () => {\r\n    const tasks = [\"Küche\", \"Bad\", \"Sonstiges\"];\r\n    const person = [\"Andi\", \"Magda\", \"Juliana\"];\r\n\r\n    function getRotationForWeek(weekNumber: number): Rotation[] {\r\n        return person.map((s_person, index) => ({\r\n            task: tasks[(index + weekNumber) % person.length],\r\n            person: s_person, //Läuft in der Art einfach andersrum durch\r\n        }));\r\n    }\r\n\r\n    const currentWeek = getWeek(new Date(), { weekStartsOn: 1 })+4;\r\n    const rotation = getRotationForWeek(currentWeek)\r\n    console.log(rotation)\r\n\r\n    return (\r\n        <PutzplanComponent rotation={rotation}/>\r\n    )\r\n}\r\n\r\nexport {PutzplanContainer};","import * as React from 'react';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\nimport {PutzplanContainer} from '../components/PutzplanContainer';\r\n\r\n// Typanmerkung für die Komponente: Die Komponente gibt ein JSX.Element zurück\r\nconst PutzplanPage: React.FC = (): JSX.Element => {\r\n  return (\r\n    <Layout pageTitle='Putzplan'>\r\n      <PutzplanContainer />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// Typanmerkung für die Head-Komponente\r\nexport const Head: React.FC = (): JSX.Element => <Seo title= \"Putzplan\" />;\r\n\r\nexport default PutzplanPage;","// extracted by mini-css-extract-plugin\nexport var addItemButton = \"EinkaufslisteComponents-module--addItemButton--e67df\";\nexport var addItemForm = \"EinkaufslisteComponents-module--addItemForm--9fac1\";\nexport var addItemInput = \"EinkaufslisteComponents-module--addItemInput--2c28a\";\nexport var removeCompletedButton = \"EinkaufslisteComponents-module--removeCompletedButton--57cf7\";\nexport var shoppingListItemCheckboxStyle = \"EinkaufslisteComponents-module--shoppingListItemCheckboxStyle--60e76\";\nexport var shoppingListItemStyle = \"EinkaufslisteComponents-module--shoppingListItemStyle--fc2de\";"],"names":["navLinkItem","navLinkText","_ref","pageTitle","children","data","useStaticQuery","React","className","site","siteMetadata","title","Link","to","Math","pow","toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN","defaultOptions","getDefaultOptions","startOfWeek","date","options","weekStartsOn","locale","_date","day","getDay","diff","setDate","getDate","setHours","constructFrom","value","getWeekYear","year","getFullYear","firstWeekContainsDate","firstWeekOfNextYear","setFullYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime","startOfWeekYear","firstWeek","getWeek","round","rotation","style","paddingLeft","map","item","index","shoppingListItemStyle","key","person","task","PutzplanContainer","tasks","currentWeek","weekNumber","s_person","length","console","log","PutzplanComponent","Head","Seo","Layout","addItemButton","addItemForm","addItemInput","removeCompletedButton","shoppingListItemCheckboxStyle"],"sourceRoot":""}